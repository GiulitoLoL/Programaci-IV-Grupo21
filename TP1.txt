Punto 1 - Interfases:

Interfase de Animals:

export interface animals{

    hacerSonido():void;
    moverse():void;
}

Clase Perro:

import { animals } from "./animals"

export class Dog{
    private sound:string
    private move:string

    constructor (
        sound:string = 'Guau', 
        move:string = 'El perro corre'){
        
        this.sound = sound,
        this.move = move
    }

    hacerSonido():void{
        console.log(this.sound)
    }

    moverse():void{
        console.log(this.move)
    }
}

index para mostrar resultado:

import { Dog } from "./animals/dog";

const perro = new Dog();

perro.hacerSonido()
perro.moverse()


Punto 2 - Clase Abstracta:

Clase abstracta figure.ts:

export abstract class Figure {
    constructor(
        private _x = 0, 
        private _y = 0
    ){}

    get x(){ 
        return this._x; 
    } 
    set x(v: number){ 
        this._x = v; 
    }

    get y(){ 
        return this._y; 
    } 
    set y(v: number){ 
        this._y = v; 
    }

    abstract dibujar(): void;
    abstract borrar(): void;
    abstract mover(): void;
    abstract eliminar(): void;
    abstract calcularArea():void;
}

index para mostrar el resultado:

import { Circle } from "./figures/circle";
import { Triangulo } from "./figures/triangulo";
import { Rectangle } from "./figures/rectangle";
import { Figure } from "./figures/figure";

const circle = new Circle(5,5);
const triangulo = new Triangulo(5,5);
const rectangle = new Rectangle(5,5);
const figuras:Figure [] = [circle, triangulo, rectangle];

figuras[0].dibujar()
figuras[1].dibujar()
figuras[2].dibujar()

figuras[0].calcularArea()
figuras[1].calcularArea()
figuras[2].calcularArea()


Punto 3 - Herencia y Polimorfismo:

